import numpy as np
import Simplex as sp
'''
Прямая                                       Каноническая форма
 -2x1 - 1x2 - 3x3 - 5x4 - 1x5 -> min        -2x1 - 1x2 - 3x3 - 5x4 - 1x5 + 1x6 + 0x7 + 0x8-> min

  1x1 + 7x2 + 3x3 + 7x4 + 0x5 >= 10          1x1 + 7x2 + 3x3 + 7x4 + 0x5 - 0x6 - 1x7 + 0x8 = 10
  3x1 - 1x2 + 1x3 + 2x4 + 0x5 <= 45          -3x1 + 1x2 - 1x3 - 2x4 - 0x5 + 0x6 - 0x7 - 1x8 = -45
  2x1 + 3x2 - 1x3 + 1x4 + 1x5 = 10           2x1 + 3x2 - 1x3 + 1x4 + 1x5 - 1x6 + 0x7 + 0x8 = 10
  1x1 + 1x2 + 1x3 + 1x4 + 1x5 = 20           1x1 + 1x2 + 1x3 + 1x4 + 1x5 - 1x6 + 0x7 + 0x8 = 20
  0x1 + 2x2 + 1x3 + 0x4 + 0x5 = 5            0x1 + 2x2 + 1x3 + 0x4 + 0x5 - 0x6 + 0x7 + 0x8 = 5
                                           
  x1,x2,x3,x4 >= 0                           x1,x2,x3,x4,x5,x6,x7,x8 >=0
  x5 <> 
'''

'''
Двойственная                                 Каноническая форма
10y1 -45y2 + 10y3 + 20y4 + 5y5 -> max        10y1 - 45y2 + 10y3 - 10y4 + 20y5 - 20y6 + 5y7 - 5y8  + 0y9 + 0y10 + 0y11 + 0y12 -> max 

 1y1 - 3y2 + 2y3 + 1y4 + 0y5 <= -2           1y1 - 3y2 + 2y3 - 2y4 + 1y5 - 1y6 + 0y7 - 0y8 + 1y9 + 0y10 + 0y11 + 0y12 = -2
 7y1 + 1y2 + 3y3 + 1y4 + 2y5 <= -1           7y1 + 1y2 + 3y3 - 3y4 + 1y5 - 1y6 + 2y7 - 2y8 + 0y1 + 1y10 + 0y11 + 0y12 = -1
 3y1 - 1y2 - 1y3 + 1y4 + 1y5 <= -3           3y1 - 1y2 - 1y3 + 1y4 + 1y5 - 1y6 + 1y7 - 1y8 + 0y9 + 0y10 + 1y11 + 0y12 = -3
 7y1 - 2y2 + 1y3 + 1y4 + 0y5 <= -5           7y1 - 2y2 + 1y3 - 1y4 + 1y5 - 1y6 + 0y7 - 0y8 + 0y9 + 0y10 + 0y11 + 1y12 = -5
 0y1 + 0y2 + 1y3 + 1y4 + 0y5 = -1            0y1 + 0y2 + 1y3 - 1y4 + 1y5 - 1y6 + 0y7 - 0y8 + 0y9 + 0y10 + 0y11 + 0y12 = -1
 
 y1, y2 >=0                                  y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12 >=0
 y3, y4, y5 <>

'''


if __name__ == '__main__':
    A = np.array([[1, 7, 3, 7, 0, 0, -1, 0],
                  [-3, 1, -1, -2, 0, 0, 0, -1],
                  [2, 3, -1, 1, 1, -1, 0, 0],
                  [1, 1, 1, 1, 1, -1, 0, 0],
                  [0, 2, 1, 0, 0, 0, 0, 0]], float)
    c = np.array([-2, -1, -3, -5, -1, 1, 0, 0], float)
    b = np.array([10, -45, 10, 20, 5], float)
    res = sp.simplex_method(c, A, b)
    np.set_printoptions( suppress=True)
    print(f"Прямая(канонический вид) задача\nОпорный вектор x*:  {res}")
    print(f"Значение целевой функции: {np.dot(c, res)}\n")

    Ad = np.array([[1, -3, 2, -2, 1, -1, 0, 0, 1, 0, 0, 0],
                  [7, 1, 3, -3, 1, -1, 2, -2, 0, 1, 0, 0],
                  [3, -1, -1, 1, 1, -1, 1, -1, 0, 0, 1, 0],
                  [7, -2, 1, -1, 1, -1, 0, 0, 0, 0, 0, 1],
                  [0, 0, 1, -1, 1, -1, 0, 0, 0, 0, 0, 0]], float)
    cd = np.array([-10, 45, -10, 10, -20, 20, -5, 5, 0, 0, 0, 0], float) #домножил на -1, дабы перейти к минимуму и симплекс запустить
    bd = np.array([-2, -1, -3, -5, -1], float)
    resd = sp.simplex_method(cd, Ad, bd)
    print(f"Двойственная(канонический вид) задача\nОпорный вектор y*:  {resd}")
    print(f"Значение целевой функции: {-np.dot(cd, resd)}")

    M = 5
    N = 5
    M1 = np.array([0, 1])
    N1 = np.array([0 , 1, 2, 3])
    N2 = np.array([4])
    y = np.array([0, 2, -1/3, -2/3, -2/3], float)
    x = np.array([0, 0, 5, 20, -5], float)
    cdd = np.array([-2, -1, -3, -5, -1])
    bdd = np.array([10, -45, 10, 20, 5])
    Add = np.array([[1, 7, 3, 7 ,0],
                    [-3, 1, -1, -2, 0],
                    [2, 3,-1, 1, 1],
                    [1, 1, 1, 1, 1],
                    [0, 2, 1, 0 , 0]], float)
    print(y[M1])
    print(cdd[N1] - np.dot(y[:M], Add[:M, N1]))
    print(cdd[N2] - np.dot(y[:M], Add[:M, N2]))
    print(np.dot(y[M1], np.dot(Add[M1, :N], x[:N]) - bdd[M1]))
    print(np.dot(cdd[N1] - np.dot(y[:M], Add[:M, N1]), x[N1]))
